#ifndef FIXEDKEY_H
#define FIXEDKEY_H

/************************************************************/
/*    Derives shared keys from seed and simple algorithm    */
/************************************************************/

u8 seedHeader[32] = {	0xef, 0xa8, 0xfe, 0x36, 0xeb, 0x80, 0x02, 0x5c,
						0x0f, 0xfd, 0x09, 0x1a, 0xa9, 0x1c, 0x50, 0xf8,
						0x3e, 0xeb, 0x52, 0x74, 0x9c, 0x56, 0xa4, 0x44,
						0x7b, 0x31, 0x6c, 0x1a, 0xe5, 0xbc, 0xf7, 0x5d	};
u8 seedFooter[32] = {	0x42, 0x3c, 0x05, 0xf2, 0xc4, 0x9b, 0x8c, 0x3e,
						0x79, 0x16, 0xba, 0xd2, 0x54, 0xd7, 0x92, 0x48,
						0xc2, 0x55, 0xba, 0x8c, 0xe2, 0xe5, 0xe5, 0xd2,
						0x1b, 0x1a, 0x1c, 0xbc, 0x49, 0xab, 0x28, 0x18	};	
u8 fixedHeaderKey[32];
u8 fixedFooterKey[32];

void deriveFixedKeys(void)
{
	int i,generator = 0x55;
	for (i=0;i<32;i++)
		{
		int byte = seedHeader[i];
		generator = (generator*byte + 0x12) % 256;
		fixedHeaderKey[i] = generator^byte;
		}
	generator = 0x18;
	for (i=0;i<32;i++)
		{
		int byte = seedFooter[i];
		generator = (generator*byte + 0xe2) % 256;
		fixedFooterKey[i] = generator^byte;
		}
	for (i=0;i<32;i++) seedHeader[i]=0xff;
	for (i=0;i<32;i++) seedFooter[i]=0xff;
	return;
}

#endif
